# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:51:06+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel


class AlreadyExistsException(RootModel[Any]):
    root: Any


class BadRequestException(RootModel[Any]):
    root: Any


class Boolean(RootModel[bool]):
    root: bool


class CreateConfigurationSetEventDestinationResponse(BaseModel):
    pass


class CreateConfigurationSetResponse(BaseModel):
    pass


class DeleteConfigurationSetEventDestinationRequest(BaseModel):
    pass


class DeleteConfigurationSetEventDestinationResponse(BaseModel):
    pass


class DeleteConfigurationSetRequest(BaseModel):
    pass


class DeleteConfigurationSetResponse(BaseModel):
    pass


class EventType(Enum):
    INITIATED_CALL = 'INITIATED_CALL'
    RINGING = 'RINGING'
    ANSWERED = 'ANSWERED'
    COMPLETED_CALL = 'COMPLETED_CALL'
    BUSY = 'BUSY'
    FAILED = 'FAILED'
    NO_ANSWER = 'NO_ANSWER'


class EventTypes(RootModel[List[EventType]]):
    root: List[EventType] = Field(
        ...,
        description='An array of EventDestination objects. Each EventDestination object includes ARNs and other information that define an event destination.',
    )


class GetConfigurationSetEventDestinationsRequest(BaseModel):
    pass


class InternalServiceErrorException(RootModel[Any]):
    root: Any


class LimitExceededException(RootModel[Any]):
    root: Any


class ListConfigurationSetsRequest(BaseModel):
    pass


class NextTokenString(RootModel[str]):
    root: str


class NonEmptyString(RootModel[str]):
    root: str


class NotFoundException(RootModel[Any]):
    root: Any


class String(RootModel[str]):
    root: str


class TooManyRequestsException(RootModel[Any]):
    root: Any


class UpdateConfigurationSetEventDestinationResponse(BaseModel):
    pass


class WordCharactersWithDelimiters(RootModel[str]):
    root: str


class FieldString(RootModel[str]):
    root: str


class V1SmsVoiceConfigurationSetsPostRequest(BaseModel):
    ConfigurationSetName: Optional[str] = Field(
        None, description='The name that you want to give the configuration set.'
    )


class CallInstructionsMessageType(BaseModel):
    Text: Optional[NonEmptyString] = None


class CloudWatchLogsDestination(BaseModel):
    IamRoleArn: Optional[String] = None
    LogGroupArn: Optional[String] = None


class ConfigurationSets(RootModel[List[WordCharactersWithDelimiters]]):
    root: List[WordCharactersWithDelimiters] = Field(
        ...,
        description='An array that contains all of the configuration sets in your Amazon Pinpoint account in the current AWS Region.',
    )


class CreateConfigurationSetRequest(BaseModel):
    ConfigurationSetName: Optional[WordCharactersWithDelimiters] = None


class KinesisFirehoseDestination(BaseModel):
    DeliveryStreamArn: Optional[String] = None
    IamRoleArn: Optional[String] = None


class ListConfigurationSetsResponse(BaseModel):
    ConfigurationSets_1: Optional[ConfigurationSets] = Field(
        None, alias='ConfigurationSets'
    )
    NextToken: Optional[NextTokenString] = None


class PlainTextMessageType(BaseModel):
    LanguageCode: Optional[String] = None
    Text: Optional[NonEmptyString] = None
    VoiceId: Optional[String] = None


class SSMLMessageType(BaseModel):
    LanguageCode: Optional[String] = None
    Text: Optional[NonEmptyString] = None
    VoiceId: Optional[String] = None


class SendVoiceMessageResponse(BaseModel):
    MessageId: Optional[String] = None


class SnsDestination(BaseModel):
    TopicArn: Optional[String] = None


class VoiceMessageContent(BaseModel):
    CallInstructionsMessage: Optional[CallInstructionsMessageType] = None
    PlainTextMessage: Optional[PlainTextMessageType] = None
    SSMLMessage: Optional[SSMLMessageType] = None


class EventDestination1(BaseModel):
    CloudWatchLogsDestination_1: Optional[CloudWatchLogsDestination] = Field(
        None, alias='CloudWatchLogsDestination'
    )
    Enabled: Optional[Boolean] = None
    KinesisFirehoseDestination_1: Optional[KinesisFirehoseDestination] = Field(
        None, alias='KinesisFirehoseDestination'
    )
    MatchingEventTypes: Optional[EventTypes] = None
    SnsDestination_1: Optional[SnsDestination] = Field(None, alias='SnsDestination')


class V1SmsVoiceConfigurationSetsConfigurationSetNameEventDestinationsPostRequest(
    BaseModel
):
    EventDestination: Optional[EventDestination1] = Field(
        None, description='An object that defines a single event destination.'
    )
    EventDestinationName: Optional[str] = Field(
        None, description='A name that identifies the event destination.'
    )


class V1SmsVoiceConfigurationSetsConfigurationSetNameEventDestinationsEventDestinationNamePutRequest(
    BaseModel
):
    EventDestination: Optional[EventDestination1] = Field(
        None, description='An object that defines a single event destination.'
    )


class Content(BaseModel):
    CallInstructionsMessage: Optional[CallInstructionsMessageType] = None
    PlainTextMessage: Optional[PlainTextMessageType] = None
    SSMLMessage: Optional[SSMLMessageType] = None


class V1SmsVoiceVoiceMessagePostRequest(BaseModel):
    CallerId: Optional[str] = Field(
        None,
        description="The phone number that appears on recipients' devices when they receive the message.",
    )
    ConfigurationSetName: Optional[str] = Field(
        None,
        description='The name of the configuration set that you want to use to send the message.',
    )
    Content_1: Optional[Content] = Field(
        None,
        alias='Content',
        description='An object that contains a voice message and information about the recipient that you want to send it to.',
    )
    DestinationPhoneNumber: Optional[str] = Field(
        None, description='The phone number that you want to send the voice message to.'
    )
    OriginationPhoneNumber: Optional[str] = Field(
        None,
        description="The phone number that Amazon Pinpoint should use to send the voice message. This isn't necessarily the phone number that appears on recipients' devices when they receive the message, because you can specify a CallerId parameter in the request.",
    )


class EventDestination(BaseModel):
    CloudWatchLogsDestination_1: Optional[CloudWatchLogsDestination] = Field(
        None, alias='CloudWatchLogsDestination'
    )
    Enabled: Optional[Boolean] = None
    KinesisFirehoseDestination_1: Optional[KinesisFirehoseDestination] = Field(
        None, alias='KinesisFirehoseDestination'
    )
    MatchingEventTypes: Optional[EventTypes] = None
    Name: Optional[String] = None
    SnsDestination_1: Optional[SnsDestination] = Field(None, alias='SnsDestination')


class EventDestinationDefinition(BaseModel):
    CloudWatchLogsDestination_1: Optional[CloudWatchLogsDestination] = Field(
        None, alias='CloudWatchLogsDestination'
    )
    Enabled: Optional[Boolean] = None
    KinesisFirehoseDestination_1: Optional[KinesisFirehoseDestination] = Field(
        None, alias='KinesisFirehoseDestination'
    )
    MatchingEventTypes: Optional[EventTypes] = None
    SnsDestination_1: Optional[SnsDestination] = Field(None, alias='SnsDestination')


class EventDestinations(RootModel[List[EventDestination]]):
    root: List[EventDestination] = Field(
        ...,
        description='An array of EventDestination objects. Each EventDestination object includes ARNs and other information that define an event destination.',
    )


class GetConfigurationSetEventDestinationsResponse(BaseModel):
    EventDestinations_1: Optional[EventDestinations] = Field(
        None, alias='EventDestinations'
    )


class SendVoiceMessageRequest(BaseModel):
    CallerId: Optional[String] = None
    ConfigurationSetName: Optional[WordCharactersWithDelimiters] = None
    Content: Optional[VoiceMessageContent] = None
    DestinationPhoneNumber: Optional[NonEmptyString] = None
    OriginationPhoneNumber: Optional[NonEmptyString] = None


class UpdateConfigurationSetEventDestinationRequest(BaseModel):
    EventDestination: Optional[EventDestinationDefinition] = None


class CreateConfigurationSetEventDestinationRequest(BaseModel):
    EventDestination: Optional[EventDestinationDefinition] = None
    EventDestinationName: Optional[NonEmptyString] = None
